/*

6、创建表：

    建表语句的语法格式：
        create table 表名(
            字段名1 数据类型,
            字段名2 数据类型,
            字段名3 数据类型,
            ...
        );

    关于MySQL当中字段的数据类型？以下只说常见的。
        int         整数型
        bigint      长整型
        float       浮点型
        char        定长字符串
        varchar     可变长字符串
        date        日期类型
        BLOB        二进制大对象（存储图片、视频等流媒体信息）Binary Large Object
        CLOB        字符大对象（存储较大文本，比如：可以存储4G的字符串。）Character Large OBject
        ......

    char和varchar怎么选择？
        在实际开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char。
        当一个字段的数据长度不确定，例如：姓名、简介等都是采用varchar。

    BLOB和CLOB类型的使用？
        电影表：t_movie
        id(int)      name(varchar)        playtime(date/char)        poster(BLOB)      story(CLOB)
        ------------------------------------------------------------------------------------------------
        1            复仇者联盟4
        2
        3
    
    表名在数据库当中一般建议以：t_或者tbl_开始。

    创建学生表：
        学生信息包括：
            学号、姓名、性别、班级编号、生日
            学号：bigint
            姓名：varchar
            性别：char
            班级编号：varchar
            生日：char

        create table t_student(
            no bigint,
            name varchar(255),
            sex char(1),
            classno varchar(255),
            birth char(10)
        );

7、insert语句插入数据
    语法格式：
        insert into 表名(字段1,字段2,字段3....) values(值1,值2,值3....)
        要求：字段的数量和值的数量相同，并且数据类型要对应相同。

    insert into t_student(no,name,sex,classno,birth) values(1,'zhangsan','1','601','1990-10-12');

    select * from t_student;
    +------+----------+------+---------+------------+
    | no   | name     | sex  | classno | birth      |
    +------+----------+------+---------+------------+
    |    1 | zhangsan | 1    | 601     | 1990-10-12 |
    +------+----------+------+---------+------------+

    insert into t_student(name,sex,classno,birth,no) values('lisi','1','601','1990-11-02',2)

    select * from t_student;
    +------+----------+------+---------+------------+
    | no   | name     | sex  | classno | birth      |
    +------+----------+------+---------+------------+
    |    1 | zhangsan | 1    | 601     | 1990-10-12 |
    |    2 | lisi     | 1    | 601     | 1990-11-02 |
    +------+----------+------+---------+------------+

    insert into t_student(name) values('wangwu'); // 除name字段之外，剩下的字段自动插入NULL。

    select * from t_student;
    +------+----------+------+---------+------------+
    | no   | name     | sex  | classno | birth      |
    +------+----------+------+---------+------------+
    |    1 | zhangsan | 1    | 601     | 1990-10-12 |
    |    2 | lisi     | 1    | 601     | 1990-11-02 |
    | NULL | wangwu   | NULL | NULL    | NULL       |
    +------+----------+------+---------+------------+

    drop table if exists t_student; // 当这个表存在的话删除。
    create table t_student(
        no bigint,
        name varchar(255),
        sex char(1) default 1,
        classno varchar(255),
        birth char(10)
    );

    insert into t_student(name) values('zhangsan');
    select * from t_student;
    +------+----------+------+---------+-------+
    | no   | name     | sex  | classno | birth |
    +------+----------+------+---------+-------+
    | NULL | zhangsan | 1    | NULL    | NULL  |
    +------+----------+------+---------+-------+

    需要注意的地方：
        当一条insert语句执行成功之后，表格当中必然会多一行记录。
        即使多的这一行记录当中某些字段是NULL，后期也没有办法
        再执行insert语句插入数据了，只能使用update进行更新。

    // 字段可以省略不写，单后面的values的字段对数量合顺序有要求（按顺序写全了）。
    insert into t_student values(1,'Jack','0','602','1991-01-14');
    select * from t_student;
    +------+----------+------+---------+------------+
    | no   | name     | sex  | classno | birth      |
    +------+----------+------+---------+------------+
    | NULL | zhangsan | 1    | NULL    | NULL       |
    |    1 | Jack     | 0    | 602     | 1991-01-14 |
    +------+----------+------+---------+------------+

    // 一次插入多行数据
    insert into t_student
        (no,name,sex,classno,birth)
    values
        (2,'rose','1',603,'1990-12-11'),
        (3,'tom','1',603,'1990-04-21');

    select * from t_student;
    +------+----------+------+---------+------------+
    | no   | name     | sex  | classno | birth      |
    +------+----------+------+---------+------------+
    | NULL | zhangsan | 1    | NULL    | NULL       |
    |    1 | Jack     | 0    | 602     | 1991-01-14 |
    |    2 | rose     | 1    | 603     | 1990-12-11 |
    |    3 | tom      | 1    | 603     | 1990-04-21 |
    +------+----------+------+---------+------------+

8、表的复制
    语法：
        create table 表名 as select语句;
        将查询结果当做表创建出来。

        create table emp1 select * from emp;

9、将查询结果插入到一张表中？
    insert into emp1 select * from emp;

10、修改数据：update
    语法格式：
        update 表名 set 字段名1=值1,字段名2=值2...where 条件;
    
    注意：没有条件整张表的数据全部更新。
    
    案例：将员工编号为10的员工的sal修改为8000，comm修改为120？
        update emp1 set sal=8000, comm=120 where empno=10;

        select * from emp1;
        +-------+--------+--------------+------+------------+----------+--------+--------+
        | EMPNO | ENAME  | JOB          | MGR  | HIREDATE   | SAL      | COMM   | DEPTNO |
        +-------+--------+--------------+------+------------+----------+--------+--------+
        |     1 | 张三   | 人事行政主管 |    5 | 2022-01-01 | 10000.00 | 300.00 |      1 |
        |     2 | 李四   | 财务主管     |    5 | 2021-10-10 |  9500.00 |   0.00 |      2 |
        |     3 | 王五   | 技术总监     |    5 | 2021-05-06 | 20000.00 | 500.00 |      3 |
        |     4 | 赵六   | Java工程师   |    3 | 2022-02-02 | 12000.00 | 300.00 |      3 |
        |     5 | 吴林   | 总经理       | NULL | 2020-10-01 | 30000.00 |   0.00 |      4 |
        |     6 | 陈金木 | C++工程师    |    3 | 2021-10-11 | 11000.00 |   NULL |      3 |
        |     7 | 李庆   | Web工程师    |    3 | 2022-01-20 | 10000.00 | 100.00 |      3 |
        |     8 | 林墨染 | Web工程师    |    3 | 2022-02-19 |  8000.00 | 100.00 |      3 |
        |     9 | 王思爽 | 测试工程师   |    3 | 2022-03-14 |  6000.00 |   NULL |      3 |
        |    10 | 李可可 | UI设计师     |    3 | 2022-02-19 |  8000.00 | 120.00 |      3 |
        |    11 | 张思思 | UI设计师     |    3 | 2022-03-01 |  6000.00 |  50.00 |      3 |
        |    12 | 康志勇 | 测试工程师   |    3 | 2022-05-06 |  8500.00 | 100.00 |      3 |
        |    13 | 秦敏   | 行政专员     |    1 | 2022-05-07 |  4500.00 |   NULL |      1 |
        |    14 | 柳茹茹 | 财务专员     |    2 | 2022-05-10 |  4800.00 |   NULL |      2 |
        |    15 | 赵东   | 行政专员     |    1 | 2022-05-09 |  5200.00 |   NULL |      1 |
        |    16 | 孙乾   | 算法工程师   |    3 | 2022-05-09 | 12000.00 | 200.00 |      3 |
        |    17 | 周正   | 算法工程师   |    3 | 2022-05-10 | 15000.00 | 300.00 |      3 |
        |    18 | 郑琳   | Java工程师   |    3 | 2022-05-05 |  9500.00 | 100.00 |      3 |
        |    19 | 陈伟   | C++工程师    |    3 | 2022-04-22 | 12000.00 | 100.00 |      3 |
        |    20 | 沈林冲 | 实施工程师   |    3 | 2022-04-11 |  8500.00 | 100.00 |      3 |
        +-------+--------+--------------+------+------------+----------+--------+--------+

    更新所有条件时，不加where。

11、删除数据
    语法格式：
        delete from 表名 where 条件;

    注意：没有条件全部删除。

    删除员工编号为10的数据？
        delete from emp1 where empno=10;

    删除所有记录？
        delete from emp1;

    怎么删除大表中的数据？（重点）
        truncate table 表名; // 表被截断，不可回滚，永久丢失。

    怎么删除表？
        drop table 表名; // 这个通用。
        drop table if exists 表名; // Oracle不支持这种写法。

12、对于表结构的修改，使用工具操作即可。
    在实际开发中，表一旦设计好之后，对表结构的修改是很少的。
    修改表结构的语句不会出现在node.js代码当中，
    出现在node.js代码当中的sql包括insert delete update select（这些都是表中的数据操作。）

    增删改查有一个术语：CRUD操作
    Create(增) Retrieve(检索) Update(改) Delete(删)






*/ 